"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _express = require("express");

var _express2 = _interopRequireDefault(_express);

var _chokidar = require("chokidar");

var _chokidar2 = _interopRequireDefault(_chokidar);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

exports.default = function (app, _ref) {
  var requireFile = _ref.requireFile,
      watch = _ref.watch,
      clearIf = _ref.clearIf,
      watchOpts = _ref.watchOpts,
      _ref$args = _ref.args,
      args = _ref$args === undefined ? [] : _ref$args;


  if (!clearIf) clearIf = function clearIf(file) {
    return file.indexOf("node_modules") === -1;
  };

  var router = _express2.default.Router(),
      _require = require(requireFile),
      fn = _require.default,
      tearDown = _require.tearDown;


  fn.apply(null, [router].concat(_toConsumableArray(args)));

  _chokidar2.default.watch(watch, _extends({
    awaitWriteFinish: {
      stabilityThreshold: 500,
      pollInterval: 100
    },
    ignoreInitial: true
  }, watchOpts)).on("all", function () {
    Promise.resolve(tearDown ? tearDown() : null).then(function () {
      Object.keys(require.cache).forEach(function (key) {
        if (clearIf(key)) delete require.cache[key];
      });

      var _require2 = require(requireFile),
          nextFn = _require2.default,
          nextTearDown = _require2.tearDown;

      router = _express2.default.Router();
      nextFn.apply(null, [router].concat(_toConsumableArray(args)));
      tearDown = nextTearDown;
    }).catch(function (err) {
      console.error("ERR", err);
    });
  });

  app.use("/", function (req, res, next) {
    router(req, res, next);
  });
};